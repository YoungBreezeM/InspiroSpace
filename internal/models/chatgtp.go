package models

import (
	"easygin/internal/log"
	"encoding/json"
)

// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

type ApiChatRequest struct {
	ChatId          string `json:"chat_id" validate:"required"`
	Prompt          string `json:"prompt" validate:"required"`
	ParentMessageId string `json:"parent_message_id"`
	ConversationId  string `json:"conversation_id"`
	Token           string `json:"token"`
}

type ChatGTPResp struct {
	Message        Message     `json:"message"`
	ConversationID string      `json:"conversation_id"`
	Error          interface{} `json:"error"`
}

type Message struct {
	ID         string          `json:"id"`
	Author     Author          `json:"author"`
	CreateTime float64         `json:"create_time"`
	UpdateTime interface{}     `json:"update_time"`
	Content    Content         `json:"content"`
	Status     string          `json:"status"`
	EndTurn    bool            `json:"end_turn"`
	Weight     float64         `json:"weight"`
	Metadata   MessageMetadata `json:"metadata"`
	Recipient  string          `json:"recipient"`
}

type Author struct {
	Role     string         `json:"role"`
	Name     interface{}    `json:"name"`
	Metadata AuthorMetadata `json:"metadata"`
}

type AuthorMetadata struct {
}

type Content struct {
	ContentType string   `json:"content_type"`
	Parts       []string `json:"parts"`
}

type MessageMetadata struct {
	FinishDetails FinishDetails `json:"finish_details"`
	IsComplete    bool          `json:"is_complete"`
	MessageType   string        `json:"message_type"`
	ModelSlug     string        `json:"model_slug"`
	ParentID      string        `json:"parent_id"`
	Timestamp     string        `json:"timestamp_"`
}

type FinishDetails struct {
	Type       string  `json:"type"`
	StopTokens []int64 `json:"stop_tokens"`
}

func NewChatRespErr(msg string) string {
	c := ChatGTPResp{
		Error: msg,
	}
	return c.ToString()
}

func (c *ChatGTPResp) ToString() string {
	b, err := json.Marshal(c)
	if err != nil {
		log.Error(err)
	}

	return string(b)

}

func (a *ApiChatRequest) MarshalBinary() ([]byte, error) {
	return json.Marshal(a)
}

func (a *ApiChatRequest) UnmarshalBinary(data []byte) error {
	// Implement the binary unmarshaling logic for ApiChatRequest
	// For example, you can use encoding/binary package to convert binary to fields
	return json.Unmarshal(data, &a)
}
